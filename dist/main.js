/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/ertelecom-test/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const consts = {\r\n  SEC_SHIFT: 0.4, // Сколько пикселей в одной секунде\r\n  MILLISEC_IN_SEC: 1000, // Кол-во миллисекунд в секунде\r\n  SEC_IN_HOUR: 3600, // Кол-во секунд в часе\r\n  SEC_IN_MIN: 60, // Кол-во секунд в минуте\r\n  LEFT_BORDER: 0, // Положение левой границы в пикселях\r\n  NOW_SEC: null\r\n};\r\nlet channels, programs;\r\n\r\nwindow.onload = function () {\r\n  consts.NOW_SEC = /*getSeconds(new Date());*/35000;/* TODO т.к. у программ из json просроченный timestamp */\r\n  document.getElementById('goToNow').addEventListener('click', toCurrentTime);\r\n  document.addEventListener('keydown', arrowNavigate);\r\n  loadChannels()\r\n    .then(() => {\r\n      let channelEntries = document.getElementsByClassName('channel-entry');\r\n      for (let i = 0; i < channelEntries.length; i++){\r\n        let entry = channelEntries[i];\r\n        entry.addEventListener('click', () => {\r\n          clearSelectChannel();\r\n          entry.classList.add('active-channel');\r\n        })\r\n      }\r\n      Promise.all([setTimeline(), loadPrograms()])\r\n        .then(() => setEpgInNow())\r\n    });\r\n};\r\n/*\r\n * Загрузка каналов\r\n */\r\nfunction loadChannels()\r\n{\r\n  return loadJsonFile('src/json/channels.json', (data) => setChannels(data));\r\n}\r\n/*\r\n * Загрузка программ\r\n */\r\nfunction loadPrograms()\r\n{\r\n  return loadJsonFile('src/json/programs.json', (data) => setPrograms(data));\r\n}\r\n/*\r\n * Загрузка файлов JSON\r\n */\r\nfunction loadJsonFile(fileName, callback)\r\n{\r\n  return fetch(fileName)\r\n    .then(response => response.json())\r\n    .then(jsonResponse => callback(jsonResponse))\r\n}\r\n/*\r\n * Установка блока программ в соответствии с текущим времем\r\n */\r\nfunction setEpgInNow()\r\n{\r\n  let left = getClassPropertyValue('.programs-block', 'left') - 8;\r\n  let timelineEntryWidth = getClassPropertyValue('.timeline-entry', 'width');\r\n  let value = left - consts.NOW_SEC * consts.SEC_SHIFT + Number(timelineEntryWidth);\r\n  setClassPropertyValue('.programs-block', 'left', value);\r\n  consts.LEFT_BORDER = consts.NOW_SEC * consts.SEC_SHIFT - Number(timelineEntryWidth);\r\n}\r\n/*\r\n * Установка списка каналов\r\n */\r\nfunction setChannels(jsonData){\r\n  let channelsArray = jsonData && jsonData.collection ? jsonData.collection : null;\r\n  channels = channelsArray;\r\n  if (channelsArray){\r\n    channelsArray.sort((a, b) => {a.er_lcn - b.er_lcn});\r\n    let channelsBlock = document.getElementsByClassName('channels-block')[0];\r\n    for (let i = 0; i < channelsArray.length; i++){\r\n      let item = channelsArray[i];\r\n      let channelElement = document.createElement('DIV');\r\n      channelElement.setAttribute('class', 'channel-entry');\r\n      let numberDiv = document.createElement('DIV');\r\n      numberDiv.setAttribute('class', 'channel-number-block');\r\n      numberDiv.appendChild(document.createTextNode(item.er_lcn));\r\n      let titleDiv = document.createElement('DIV');\r\n      titleDiv.setAttribute('class', 'channel-title-block');\r\n      titleDiv.appendChild(document.createTextNode(item.title));\r\n      channelElement.appendChild(numberDiv);\r\n      channelElement.appendChild(titleDiv);\r\n      channelElement.setAttribute('data-epg-channel-id', item.epg_channel_id);\r\n      channelsBlock.appendChild(channelElement);\r\n      createEmptyProgramRow(item.epg_channel_id, i);\r\n    }\r\n  }\r\n}\r\n/*\r\n * Установка расписания программ\r\n */\r\nfunction setPrograms(data)\r\n{\r\n  let channels = document.getElementsByClassName('channel-entry');\r\n  programs = data && data.collection ? data.collection : [];\r\n  let executedChannels = [];\r\n  for (let i = 0; i < channels.length; i++){\r\n    let channelId = channels[i].getAttribute('data-epg-channel-id');\r\n    if (executedChannels.includes(channelId)){\r\n      continue;\r\n    }\r\n    let appropriatePrograms = data && data.collection ? filterProgramsByChannelId(data.collection, channelId) : [];\r\n    let programRows = document.getElementsByClassName('program-row');\r\n    let appropriateRow = null;\r\n    for (let j = 0; j < programRows.length; j++){\r\n      if (programRows[j].getAttribute('data-epg-channel-id') == channelId){\r\n        appropriateRow = programRows[j];\r\n        break;\r\n      }\r\n    }\r\n    let paddingSum = Number(getClassPropertyValue('.program-entry', 'paddingLeft')) + Number(getClassPropertyValue('.program-entry', 'paddingRight'));\r\n    for (let j = 0; j < appropriatePrograms.length; j++){\r\n      let program = document.createElement('DIV');\r\n      program.setAttribute('class', 'program-entry');\r\n      program.setAttribute('data-program-id', appropriatePrograms[j].id);\r\n      let title = appropriatePrograms[j].duration > 300 ? appropriatePrograms[j].title : '...';\r\n      program.style.width = appropriatePrograms[j].duration * consts.SEC_SHIFT - paddingSum + 'px';\r\n      program.style.left = getProgramSecondFromDayStart(appropriatePrograms[j].start) * consts.SEC_SHIFT + j + 'px';\r\n      program.onclick = () => programClick(program);\r\n      if (program.style.width == ''){\r\n        program.style.paddingLeft = program.style.paddingRight = '0px';\r\n        program.style.width = appropriatePrograms[j].duration * consts.SEC_SHIFT + 'px';\r\n        program.appendChild(document.createTextNode(''));\r\n      } else {\r\n        program.appendChild(document.createTextNode(title));\r\n      }\r\n      let secs = getSeconds(new Date(appropriatePrograms[j].start * 1000));\r\n      if (secs < consts.NOW_SEC && secs + appropriatePrograms[j].duration >= consts.NOW_SEC){\r\n        program.classList.add('current-time-program');\r\n      }\r\n      if (appropriateRow){\r\n        appropriateRow.appendChild(program);\r\n      }\r\n    }\r\n    executedChannels.push(channelId);\r\n  }\r\n}\r\n/*\r\n * Выставление таймлайна\r\n */\r\nfunction setTimeline()\r\n{\r\n  let timelineEntryWidth = getClassPropertyValue('.timeline-entry', 'width');\r\n  let timelineEntry = document.getElementsByClassName('timeline-entry');\r\n  let channelsBlockWidth = getComputedStyle(document.getElementsByClassName('channels-block')[0]).width;\r\n  channelsBlockWidth = channelsBlockWidth.substring(0, channelsBlockWidth.length - 2);\r\n  for (let i = 0; i < timelineEntry.length; i++){\r\n    let left = (i + 1) * Number(timelineEntryWidth) + Number(channelsBlockWidth);\r\n    left = left - consts.NOW_SEC * consts.SEC_SHIFT;\r\n    timelineEntry[i].style.left = left + 'px';\r\n  }\r\n  setVerticalLine();\r\n}\r\n/*\r\n * Отображение информации о программе по клику\r\n */\r\nfunction programClick(programElem)\r\n{\r\n  clearActive();\r\n  let channelId = programElem.closest('.program-row').getAttribute('data-epg-channel-id');\r\n  let programId = programElem.getAttribute('data-program-id');\r\n  let program = programs.filter((item) => {\r\n    return item.id == programId;\r\n  });\r\n  program = program[0];\r\n  showProgramStart(program);\r\n  let programRow = document.querySelectorAll('.program-row[data-epg-channel-id=\"' + channelId + '\"]')[0];\r\n  document.querySelectorAll('.program-entry[data-program-id=\"' + programId + '\"]')[0].classList.add('active-program');\r\n  let infoRow = document.createElement('DIV');\r\n  infoRow.setAttribute('class', 'info-row');\r\n  let channelsBlockWidth = getComputedStyle(document.getElementsByClassName('channels-block')[0]).width;\r\n  channelsBlockWidth = Number(channelsBlockWidth.substring(0, channelsBlockWidth.length - 2));\r\n  let contentLeft = Number(getClassPropertyValue('.programs-block', 'left')) * (-1) + channelsBlockWidth;;\r\n  let genres = '';\r\n  program.program.genres.forEach((item) => {genres += item.title + ', '});\r\n  genres = genres.substring(0, genres.length - 2);\r\n  let startHours = new Date(program.start * 1000).getHours(),\r\n    startMinutes = new Date(program.start * 1000).getMinutes() < 10 ? '0' + new Date(program.start * 1000).getMinutes() : new Date(program.start * 1000).getMinutes(),\r\n    endHours = new Date((program.start + program.duration) * 1000).getHours(),\r\n    endMinutes = new Date((program.start + program.duration) * 1000).getMinutes() < 10 ? '0' + new Date((program.start + program.duration) * 1000).getMinutes() : new Date((program.start + program.duration) * 1000).getMinutes();\r\n  let html = '<div class=\"info-content\" style=\"left: ' + contentLeft + 'px;\">' +\r\n             '<h2>' + program.title + '</h2>' +\r\n             '<span>' + startHours + ':' + startMinutes + ' - ' + endHours + ':' + endMinutes + '</span>' +\r\n             '<span>' + (program.program.country ? program.program.country.title + ', ' : '') + genres + '</span>' +\r\n             '<div>' + (program.program.description ? program.program.description : '') + '</div>' +\r\n             '</div>';\r\n  infoRow.innerHTML = html;\r\n  programRow.parentNode.insertBefore(infoRow, programRow.nextSibling);\r\n  let channel = document.querySelectorAll('.channel-entry[data-epg-channel-id=\"' + channelId + '\"]')[0];\r\n  channel.classList.add('active-row');\r\n}\r\n/*\r\n * Перемещение по сетке epg\r\n * @param {direction} 0 - влево, 1 - вправо\r\n */\r\nfunction navigateAtEpg(pixels, direction)\r\n{\r\n  let timelineEntries = document.getElementsByClassName('timeline-entry'),\r\n    programsBlock = document.getElementsByClassName('programs-block')[0],\r\n    programEntries = document.getElementsByClassName('program-entry');\r\n  if (direction == 0){\r\n    for (let i = 0; i < timelineEntries.length; i++){\r\n      timelineEntries[i].style.left = Number(timelineEntries[i].style.left.substring(0, timelineEntries[i].style.left.length - 2)) + Number(pixels) + 'px'\r\n    }\r\n    setClassPropertyValue('.programs-block', 'left', Number(getClassPropertyValue('.programs-block', 'left')) + Number(pixels));\r\n  } else if (direction == 1){\r\n    for (let i = 0; i < timelineEntries.length; i++){\r\n      timelineEntries[i].style.left = Number(timelineEntries[i].style.left.substring(0, timelineEntries[i].style.left.length - 2)) - Number(pixels) + 'px'\r\n    }\r\n    setClassPropertyValue('.programs-block', 'left', Number(getClassPropertyValue('.programs-block', 'left')) - Number(pixels));\r\n  }\r\n}\r\n/*\r\n * Навигация по стрелочкам\r\n */\r\nfunction arrowNavigate(event)\r\n{\r\n  let programElement = document.getElementsByClassName('active-program')[0];\r\n  if (programElement && event.altKey){\r\n    let programRowIndex = Number(programElement.closest('.program-row').getAttribute('data-row-index'));\r\n    let downCurrentElement = document.querySelectorAll('.program-row[data-row-index=\"' + programRowIndex + '\"] .active-program');\r\n    if (downCurrentElement.length > 0){\r\n      let id = downCurrentElement[0].getAttribute('data-program-id');\r\n      if (event.code == 'ArrowUp'){\r\n        downCurrentElement = document.querySelectorAll('.program-row[data-row-index=\"' + (--programRowIndex) + '\"] .current-time-program');\r\n        if (downCurrentElement[0]){\r\n          let program = programs.filter((item) => {return item.id == downCurrentElement[0].getAttribute('data-program-id')});\r\n          showProgramStart(program[0]);\r\n          programClick(downCurrentElement[0]);\r\n        }\r\n      } else if (event.code == 'ArrowDown'){\r\n        downCurrentElement = document.querySelectorAll('.program-row[data-row-index=\"' + (++programRowIndex) + '\"] .current-time-program');\r\n        if (downCurrentElement[0]){\r\n          let program = programs.filter((item) => {return item.id == downCurrentElement[0].getAttribute('data-program-id')});\r\n          showProgramStart(program[0]);\r\n          programClick(downCurrentElement[0]);\r\n        }\r\n      } else if (event.code == 'ArrowLeft'){\r\n        if (downCurrentElement[0].previousSibling){\r\n          id = downCurrentElement[0].previousSibling.getAttribute('data-program-id');\r\n          showProgramStart(programs.filter((item) => {return item.id == id})[0]);\r\n          programClick(downCurrentElement[0].previousSibling);\r\n        }\r\n        return;\r\n      } else if (event.code == 'ArrowRight'){\r\n        if (downCurrentElement[0].nextSibling){\r\n          id = downCurrentElement[0].nextSibling.getAttribute('data-program-id');\r\n          showProgramStart(programs.filter((item) => {return item.id == id})[0]);\r\n          programClick(downCurrentElement[0].nextSibling);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n/*\r\n * Получение свойства определенного класса без 'px'\r\n */\r\nfunction getClassPropertyValue(classSelector, property)\r\n{\r\n  let styleProperty = getStyle(classSelector)[property];\r\n  return styleProperty.substring(0, styleProperty.length - 2);\r\n}\r\n/*\r\n * Установка значения свойства определенного класса\r\n */\r\nfunction setClassPropertyValue(classSelector, property, value)\r\n{\r\n  let style = getStyle(classSelector);\r\n  if (typeof value == 'number'){\r\n    style[property] = value + 'px';\r\n  } else if (typeof value == 'string'){\r\n    style[property] = value.indexOf('px') != -1 ? value : value + 'px';\r\n  }\r\n}\r\n/*\r\n * Перемотать сетку на начало программы\r\n */\r\nfunction showProgramStart(program)\r\n{\r\n  let now = consts.LEFT_BORDER;\r\n  let programStart = getProgramSecondFromDayStart(program.start) * consts.SEC_SHIFT;\r\n  if (programStart < now){\r\n    navigateAtEpg(now - programStart, 0);\r\n  } else if (programStart > now){\r\n    navigateAtEpg(programStart - now, 1);\r\n  }\r\n  consts.LEFT_BORDER = programStart;\r\n}\r\n/*\r\n * К текущему моменту\r\n */\r\nfunction toCurrentTime()\r\n{\r\n  clearActive();\r\n  let now = consts.NOW_SEC * consts.SEC_SHIFT - Number(getClassPropertyValue('.timeline-entry', 'width')),\r\n    leftBorder = consts.LEFT_BORDER;\r\n  if (now > leftBorder){\r\n    navigateAtEpg(now - leftBorder, 1);\r\n  } else if (leftBorder > now){\r\n    navigateAtEpg(leftBorder - now, 0);\r\n  }\r\n  consts.LEFT_BORDER = now;\r\n}\r\n/*\r\n * Очистка классов активности программ\r\n */\r\nfunction clearActive()\r\n{\r\n  let infoRow = document.getElementsByClassName('info-row')[0];\r\n  if (infoRow){\r\n    infoRow.parentNode.removeChild(infoRow);\r\n    document.getElementsByClassName('active-program')[0].classList.remove('active-program');\r\n    document.getElementsByClassName('active-row')[0].classList.remove('active-row');\r\n  }\r\n}\r\n/*\r\n * Очистка классов активностей каналов\r\n */\r\nfunction clearSelectChannel()\r\n{\r\n  let actives = document.getElementsByClassName('active-channel');\r\n  for (let i = 0; i < actives.length; i++){\r\n    actives[i].classList.remove('active-channel');\r\n  }\r\n}\r\n/*\r\n * Установка вертикальной линии\r\n */\r\nfunction setVerticalLine()\r\n{\r\n  let channelsBlockHeight = getComputedStyle(document.getElementsByClassName('channels-block')[0]).height;\r\n  setClassPropertyValue('.vertical-line', 'height', channelsBlockHeight);\r\n  setClassPropertyValue('.vertical-line', 'left', consts.NOW_SEC * consts.SEC_SHIFT);\r\n}\r\n/*\r\n * Создание пустой строки с определенным epg_channel_id\r\n */\r\nfunction createEmptyProgramRow(epgChannelId, index)\r\n{\r\n  let programRow = document.createElement('DIV');\r\n  programRow.setAttribute('class', 'program-row');\r\n  programRow.setAttribute('data-row-index', index);\r\n  programRow.setAttribute('data-epg-channel-id', epgChannelId ? epgChannelId : -1);\r\n  document.getElementsByClassName('programs-block')[0].appendChild(programRow);\r\n}\r\n/*\r\n * Возвращение кол-ва секунд от начала дня до старта программы\r\n */\r\nfunction getProgramSecondFromDayStart(start)\r\n{\r\n  let date = new Date(start * consts.MILLISEC_IN_SEC);\r\n  let hours = date.getHours() * consts.SEC_IN_HOUR + date.getMinutes() * consts.SEC_IN_MIN + date.getSeconds();\r\n  return getSeconds(date);\r\n}\r\n/*\r\n * Получение списка программ с определенным channel_id\r\n */\r\nfunction filterProgramsByChannelId(programs, channelId)\r\n{\r\n  return programs.filter((item) => {\r\n    return item.channel_id == channelId;\r\n  })\r\n}\r\n/*\r\n * Получения стиля определенного класса\r\n */\r\nfunction getStyle(classSelector)\r\n{\r\n  let styleSheets = document.styleSheets;\r\n  for (let i = 0; i < styleSheets.length; i++) {\r\n    let styleSheet = styleSheets[i];\r\n    let cssProps = styleSheet.cssRules || styleSheet.rules;\r\n    for (let j = 0; j < cssProps.length; j++) {\r\n      if (cssProps[j].selectorText.indexOf(classSelector) != -1){\r\n        return cssProps[j].style;\r\n      }\r\n    }\r\n  }\r\n}\r\n/*\r\n * Получение секунд из определенной даты\r\n */\r\nfunction getSeconds(date)\r\n{\r\n  return date.getHours() * consts.SEC_IN_HOUR + date.getMinutes() * consts.SEC_IN_MIN + date.getSeconds();\r\n}\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });